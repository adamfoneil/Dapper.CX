@page
@model SampleApp.RazorPages.Pages.MultiTenancyModel
@{
}

<h3>Multi-Tenancy</h3>

<p>In a multi-tenant app, users are grouped by company or organization (generically referred to as a <i>tenant</i>), 
    and the tenant's data are partitioned so that users in a tenant can access only their tenant's data. A critical concern
    is ensuring that users can't access data belonging to another tenant partition.</p>

<p>In CRUD operations, Dapper.CX makes this easy to enforce using a couple interfaces <a href="https://github.com/adamfoneil/Models/blob/master/Models/Interfaces/ITenantUser.cs">ITenantUser&lt;T&gt;</a>
    used on your user profile class and <a href="https://github.com/adamfoneil/Models/blob/master/Models/Interfaces/ITenantIsolated.cs">ITenantIsolated&lt;T&gt;</a> used on model classes. When you implement
    these interfaces, Dapper.CX <a href="https://github.com/adamfoneil/Dapper.CX/blob/master/Dapper.CX.Base/Abstract/SqlCrudProvider.cs#L476">throws an exception</a> if a user tries to access or update a row belonging to another tenant.</p>

<p>Here are my suggestions on how to implement multi-tenancy in a .NET Core app using <code>ITenantUser&lt;T&gt;</code> and <code>ITenantIsolated&lt;T&gt;</code>.</p>

<hr/>

<div id="ITenantUser">
    <p>Implement this on your user profile class. This is how you indicate what property of your user profile class returns the tenant Id value.
    The <code>T</code> generic argument indicates the type of the tenant property.</p>
</div>

<div id="TenantIdTooltip" class="hidden">
    This is how you indicate what property of your user profile model defines what tenant they belong to. Usually, it would just
    wrap an existing property you have. In this example, I use use the existing <code>WorkspaceId</code> property, coalescing to <code>0</code>
    in case it's not set.
</div>

<div id="TenantIdInterface" class="hidden">
    Add this interface to your user profile class.
</div>

<div id="GetTenantIdTooltip" class="hidden">
    This is how you indicate what tenant a row belongs to. It's an <code>async</code> method in case you need to get the value using a query join.
    In this example, it's simply an existing property of the model.
</div>

@if (Model.Data.HasUser)
{
    if (!Model.Data.User.IsWorkspaceEnabled)
    {
        <p>user is disabled in the workspace</p>
        return;
    }

    <p>user = @(Model.Data.User.DisplayName ?? Model.Data.User.Name), local time @(Model.Data.User.LocalTime), workspaceId = @(Model.Data.User.WorkspaceId ?? 0)</p>

    @if (Model.Data.User.HasRole("Admin"))
    {
        <p>I'm an admin!</p>
    }

    <form asp-page-handler="SetWorkspace" method="post">
        <select name="workspaceId" onchange="this.form.submit()" asp-items="@Model.WorkspaceSelect" class="form-control">
            <option value="">(none)</option>
        </select>
    </form>

    <form asp-page-handler="SaveWorkspace" method="post" class="form-inline mt-4 mb-4">
        @Html.Hidden("Id", Model.Workspace?.Id ?? 0)
                            
        <label class="mr-2">Workspace Name:</label>
        @Html.TextBox("Name", Model.Workspace?.Name, new { @class = "form-control mr-2", required = "required" })
                
        <button class="btn btn-outline-dark">Save</button>            
    </form>
}

<div id="ITenantUserImpl">
    <p>In this example, I implement <code>ITenantUser&lt;T&gt;</code> on my user profile model, and it simply wraps an existing property <code>UserProfile.WorkspaceId</code>.</p>    
    <p>In this application, <a href="https://github.com/adamfoneil/Dapper.CX/blob/master/SampleApp.Models/Workspace.cs">Workspace</a> defines all the tenants.</p>
</div>

<div id="ITenantIsolateImpl">
    <p>Here's an example of implementing <code>ITenantIsolated&lt;T&gt;</code> on a model class. This is a simple case because this model already has a <code>WorkspaceId</code>
    property, which defines the tenant a row belongs to. All we need to do is return the <code>WorkspaceId</code>. The method <code>GetTenantIdAsync</code>
    is async in case you need to query it, as in the next example.</p>
</div>