@page
@model SampleApp.RazorPages.Pages.StartupModel

<h2>Startup</h2>

<p>I have a <a href="https://github.com/adamfoneil/Dapper.CX/wiki/Using-Dapper.CX-with-Dependency-Injection">wiki topic</a> on how to setup Dapper.CX at startup,
    but I'll use this page to explain it as well.</p>

<p>Here's what to do in your <code>Startup.ConfigureServices</code> method to use Dapper.CX as an injected service.</p>

<ul>
    <li>Add a model class to your project that implements <a href="https://github.com/adamfoneil/Models/blob/master/Models/Interfaces/IUserBase.cs">IUserBase</a>. Example: <a href="https://github.com/adamfoneil/Dapper.CX/blob/master/SampleApp.Models/UserProfile.cs">UserProfile</a>.
    This will map to your <code>dbo.AspNetUsers</code> table.</li>
    <li>Install NuGet package <a href="https://www.nuget.org/packages/Dapper.CX.SqlServer.AspNetCore/">Dapper.CX.SqlServer.AspNetCore</a> in your application project. Do not install in your business or model layer projects.</li>
    <li>Add a service to your project that derives from abstract class <a href="https://github.com/adamfoneil/Dapper.CX/blob/master/Dapper.CX.SqlServer.AspNetCore/Services/DbUserClaimsConverter.cs">DbUserClaimsConverter&lt;TUser&gt;</a>. This used to convert your user profile model class to a set of claims that map onto it. Example: <a href="https://github.com/adamfoneil/Dapper.CX/blob/master/SampleApp.RazorPages/Services/UserProfileClaimsConverter.cs">UserProfileClaimsConverter</a>.</li>
    <li>
        <p>Add a custom claims factory to the line that adds Identity to your application. This is what enables your application's login process
        to make your user metadata available to your application.</p>
<pre><code class="code-block csharp">services
    .AddDefaultIdentity&lt;IdentityUser&gt;(options => options.SignIn.RequireConfirmedAccount = true)
    .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;()
    <span class="highlight">.AddClaimsPrincipalFactory&lt;UserProfileClaimsFactory&gt;();</span>
</code></pre>
    </li>
    <li>
        <p>Call the <a href="https://github.com/adamfoneil/Dapper.CX/blob/master/Dapper.CX.SqlServer.AspNetCore/CrudServiceExtensions.cs#L20">AddDapperCX</a> extension method.</p>
    </li>
</ul>

<p>Use this page as a walkthrough of the sample app's examples.</p>

<div id="claims-converter">
    <p>To enable efficient user profile access throughout your application, you don't want to have to query your user profile information
    from the database with every page view. Likewise, relying on Session or some other in-memory cache feature introduces complications and
    dependencies of its own. Dapper.CX's approach is to use .NET Core's <a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/claims?view=aspnetcore-3.1">Claims</a> feature. Claims are user metadata
    generated by an application as a set of key-value pairs, much like cookies.</p>
    <p>Claims by themselves aren't very useful, however, because they're essentially just strings. What you need is a class that converts Claims to a
    user profile class of your chosing <code>TUser</code>. When you add Dapper.CX to your services container, part of what you must specify is a class
    that converts Claims into your <code>TUser</code> class and back. To do that, you create a class that inherits from <a href="https://github.com/adamfoneil/Dapper.CX/blob/master/Dapper.CX.SqlServer.AspNetCore/Services/DbUserClaimsConverter.cs">DbUserClaimsConverter&lt;TUser&gt;</a>.</p>
    <p>The Sample App here uses the example below:</p>
</div>

<div id="claims-factory">
    <p>Once you have a Claims Converter class, as described above, you need to enable the login process to make use of it. In other words,
    when users log in, you want the claims your application relies on to be generated for each user. To do this, you create a class that inherits from
    <a href="https://github.com/adamfoneil/Dapper.CX/blob/master/Dapper.CX.SqlServer.AspNetCore/Services/DbUserClaimsFactory.cs">DbUserClaimsFactory&lt;TUser&gt;</a>.
    This is, in turn, based on a built-in .NET Core class <code>UserClaimsPrincipalFactory&lt;IdentityUser&gt;</code>.</p>
    <p>Fortunately, this is pretty simple because there's nothing you have to implement specifically. You just have to pass the <code>ClaimsConverter</code>
    you already created in the <code>ClaimsFactory</code> constructor.</p>
</div>