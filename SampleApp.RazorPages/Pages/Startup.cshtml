@page
@model SampleApp.RazorPages.Pages.StartupModel

<h2>Startup</h2>

<p>I have a decent <a href="https://github.com/adamfoneil/Dapper.CX/wiki/Using-Dapper.CX-with-Dependency-Injection">wiki topic</a> on how to setup Dapper.CX at startup,
    that I don't simply want to repeat here.</p>

<p>Use this page as a walkthrough of the sample app's examples.</p>

<div id="claims-converter">
    <p>To enable efficient user profile access throughout your application, you don't want to have to query your user profile information
    from the database with every page view. Likewise, relying on Session or some other in-memory cache feature introduces complications and
    dependencies of its own. Dapper.CX's approach is to use .NET Core's <a href="https://docs.microsoft.com/en-us/aspnet/core/security/authorization/claims?view=aspnetcore-3.1">Claims</a> feature. Claims are user metadata
    generated by an application as a set of key-value pairs, much like cookies.</p>
    <p>Claims by themselves aren't very useful, however, because they're essentially just strings. What you need is a class that converts Claims to a
    user profile class of your chosing <code>TUser</code>. When you add Dapper.CX to your services container, part of what you must specify is a class
    that converts Claims into your <code>TUser</code> class and back. To do that, you create a class that inherits from <a href="https://github.com/adamfoneil/Dapper.CX/blob/master/Dapper.CX.SqlServer.AspNetCore/Services/DbUserClaimsConverter.cs">DbUserClaimsConverter&lt;TUser&gt;</a>.</p>
    <p>The Sample App here uses the example below:</p>
</div>