<p>Here's a typical use of <a href="https://github.com/adamfoneil/Dapper.CX/blob/master/Dapper.CX.Base/Abstract/SqlCrudService.cs#L117">SaveAsync</a>
    that you might see in an MVC app. The <code>SaveAsync</code> method performs an <a href="https://github.com/adamfoneil/Dapper.CX/blob/master/Dapper.CX.Base/Abstract/SqlCrudProvider.cs#L88-L99">insert or update</a> automatically.</p>

<pre><code class="csharp">
    [HttpPost]
    public async Task&lt;RedirectResult&gt; OnSubmitAsync(Item item)
    {
        await Data.SaveAsync(Item);
        return Redirect("/Items");
    }
</code></pre>

<p>You can also use the <a href="https://github.com/adamfoneil/Dapper.CX/blob/master/Dapper.CX.SqlServer.AspNetCore/Extensions/DapperCXExtensions.cs#L15">SaveAndRedirectAsync</a> extension method 
    to add exception handling and redirect delegates. This snippet comes from <a href="https://github.com/adamfoneil/Dapper.CX/blob/master/SampleApp.RazorPages/Pages/Items.cshtml.cs#L35-L40">here</a>, and demonstrates how to capture success and error
    messages as well as handle the redirect.</p>

<pre><code class="csharp">
    public async Task&lt;RedirectResult&gt; OnPostSaveItemAsync(Item item) => 
        await Data.SaveAndRedirectAsync(item, 
            // where do we redirect after success or fail? If save successful, model.Id != 0
            (model, exc) => (model.Id != 0) ? Redirect($"/Items/{model.Id}") : Redirect("/Items"), 
            // in a multi-tenant environment, we need to make sure the tenant Id (workspaceId in this case) is set
            beforeSave: (model) => model.WorkspaceId = Data.User.WorkspaceId ?? 0,
            // capture success message in TempData
            onSuccess: (model) => SaveSuccessMessage($"Item {model.Name} updated successfully."), 
            // capture error message in TempData
            onException: (model, exc) => SaveErrorMessage(exc));
</code></pre>